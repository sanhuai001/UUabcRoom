package com.uuabc.classroomlib.model.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOTTIE_RECORD".
*/
public class LottieRecordDao extends AbstractDao<LottieRecord, Long> {

    public static final String TABLENAME = "LOTTIE_RECORD";

    /**
     * Properties of entity LottieRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MainKey = new Property(0, Long.class, "mainKey", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "id");
        public final static Property Code = new Property(2, String.class, "code", false, "code");
        public final static Property Name = new Property(3, String.class, "name", false, "name");
        public final static Property GroupName = new Property(4, String.class, "groupName", false, "groupName");
        public final static Property LottieJsonPath = new Property(5, String.class, "lottieJsonPath", false, "lottieJsonPath");
        public final static Property SmallImgPath = new Property(6, String.class, "smallImgPath", false, "smallImgPath");
        public final static Property Reserve1 = new Property(7, String.class, "reserve1", false, "reserve1");
        public final static Property Reserve2 = new Property(8, String.class, "reserve2", false, "reserve2");
        public final static Property Reserve3 = new Property(9, String.class, "reserve3", false, "reserve3");
        public final static Property Reserve4 = new Property(10, boolean.class, "reserve4", false, "reserve4");
        public final static Property Reserve5 = new Property(11, int.class, "reserve5", false, "reserve5");
    }


    public LottieRecordDao(DaoConfig config) {
        super(config);
    }
    
    public LottieRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOTTIE_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: mainKey
                "\"id\" TEXT," + // 1: id
                "\"code\" TEXT," + // 2: code
                "\"name\" TEXT," + // 3: name
                "\"groupName\" TEXT," + // 4: groupName
                "\"lottieJsonPath\" TEXT," + // 5: lottieJsonPath
                "\"smallImgPath\" TEXT," + // 6: smallImgPath
                "\"reserve1\" TEXT," + // 7: reserve1
                "\"reserve2\" TEXT," + // 8: reserve2
                "\"reserve3\" TEXT," + // 9: reserve3
                "\"reserve4\" INTEGER NOT NULL ," + // 10: reserve4
                "\"reserve5\" INTEGER NOT NULL );"); // 11: reserve5
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOTTIE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LottieRecord entity) {
        stmt.clearBindings();
 
        Long mainKey = entity.getMainKey();
        if (mainKey != null) {
            stmt.bindLong(1, mainKey);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(5, groupName);
        }
 
        String lottieJsonPath = entity.getLottieJsonPath();
        if (lottieJsonPath != null) {
            stmt.bindString(6, lottieJsonPath);
        }
 
        String smallImgPath = entity.getSmallImgPath();
        if (smallImgPath != null) {
            stmt.bindString(7, smallImgPath);
        }
 
        String reserve1 = entity.getReserve1();
        if (reserve1 != null) {
            stmt.bindString(8, reserve1);
        }
 
        String reserve2 = entity.getReserve2();
        if (reserve2 != null) {
            stmt.bindString(9, reserve2);
        }
 
        String reserve3 = entity.getReserve3();
        if (reserve3 != null) {
            stmt.bindString(10, reserve3);
        }
        stmt.bindLong(11, entity.getReserve4() ? 1L: 0L);
        stmt.bindLong(12, entity.getReserve5());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LottieRecord entity) {
        stmt.clearBindings();
 
        Long mainKey = entity.getMainKey();
        if (mainKey != null) {
            stmt.bindLong(1, mainKey);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(5, groupName);
        }
 
        String lottieJsonPath = entity.getLottieJsonPath();
        if (lottieJsonPath != null) {
            stmt.bindString(6, lottieJsonPath);
        }
 
        String smallImgPath = entity.getSmallImgPath();
        if (smallImgPath != null) {
            stmt.bindString(7, smallImgPath);
        }
 
        String reserve1 = entity.getReserve1();
        if (reserve1 != null) {
            stmt.bindString(8, reserve1);
        }
 
        String reserve2 = entity.getReserve2();
        if (reserve2 != null) {
            stmt.bindString(9, reserve2);
        }
 
        String reserve3 = entity.getReserve3();
        if (reserve3 != null) {
            stmt.bindString(10, reserve3);
        }
        stmt.bindLong(11, entity.getReserve4() ? 1L: 0L);
        stmt.bindLong(12, entity.getReserve5());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LottieRecord readEntity(Cursor cursor, int offset) {
        LottieRecord entity = new LottieRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // mainKey
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lottieJsonPath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // smallImgPath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // reserve1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // reserve2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // reserve3
            cursor.getShort(offset + 10) != 0, // reserve4
            cursor.getInt(offset + 11) // reserve5
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LottieRecord entity, int offset) {
        entity.setMainKey(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLottieJsonPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSmallImgPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReserve1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReserve2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReserve3(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setReserve4(cursor.getShort(offset + 10) != 0);
        entity.setReserve5(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LottieRecord entity, long rowId) {
        entity.setMainKey(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LottieRecord entity) {
        if(entity != null) {
            return entity.getMainKey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LottieRecord entity) {
        return entity.getMainKey() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
